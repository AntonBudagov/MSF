(function(appl) {
    "use strict";
    ymaps.ready(function() {
        var targetCoords = [ 55.708369, 37.653084 ];
        var mapCords = [ 55.709813927480994, 37.65388567196652 ];
        var squareLayout = ymaps.templateLayoutFactory.createClass('<div class="popup _type_normal _position_top"><div class="popup__arrow"></div><div class="dot"></div><div class="popup__content"><div class="whats-here-preview"><div class="whats-here-preview__main"><div class="whats-here-preview__title">улица Ленинская Слобода, 19</div><div class="whats-here-preview__coords"><span>55.708354</span><span>,</span><span>37.652705</span></div></div><div class="whats-here-preview__route"></div></div></div></div>');
        var myMap = new ymaps.Map("map", {
            center: mapCords,
            zoom: 16,
            controls: []
        }), squarePlacemark = new ymaps.Placemark(targetCoords, {
            hintContent: "Ленинская Слобода, д. 19, БЦ «Омега Плаза»"
        }, {
            iconLayout: squareLayout
        }), ZoomLayout = ymaps.templateLayoutFactory.createClass("<div class='controls_zoom'>" + "<div id='zoom-in' class='btn'><i class='icon-plus'></i></div><br>" + "<div id='zoom-out' class='btn'><i class='icon-minus'></i></div>" + "</div>", {
            build: function() {
                ZoomLayout.superclass.build.call(this);
                this.zoomInCallback = ymaps.util.bind(this.zoomIn, this);
                this.zoomOutCallback = ymaps.util.bind(this.zoomOut, this);
                $("#zoom-in").bind("click", this.zoomInCallback);
                $("#zoom-out").bind("click", this.zoomOutCallback);
            },
            clear: function() {
                $("#zoom-in").unbind("click", this.zoomInCallback);
                $("#zoom-out").unbind("click", this.zoomOutCallback);
                ZoomLayout.superclass.clear.call(this);
            },
            zoomIn: function() {
                var map = this.getData().control.getMap();
                this.events.fire("zoomchange", {
                    oldZoom: map.getZoom(),
                    newZoom: map.getZoom() + 1
                });
            },
            zoomOut: function() {
                var map = this.getData().control.getMap();
                this.events.fire("zoomchange", {
                    oldZoom: map.getZoom(),
                    newZoom: map.getZoom() - 1
                });
            }
        }), zoomControl = new ymaps.control.ZoomControl({
            options: {
                layout: ZoomLayout
            }
        });
        myMap.controls.add(zoomControl);
        myMap.geoObjects.add(squarePlacemark);
    });
    $(".modal-trigger").leanModal({
        starting_top: "0%"
    });
    var clienAboutUsCarusel, owl;
    clienAboutUsCarusel = {
        loop: false,
        margin: 0,
        items: 1,
        nav: true,
        dots: false
    };
    owl = $(".clienAboutUsCarusel");
    $(".UserReviewCarusel").owlCarousel(clienAboutUsCarusel);
    $(".clienAboutUsCarusel").on("initialized.owl.carousel changed.owl.carousel", function(e) {
        if (!e.namespace) return;
        var carousel = e.relatedTarget;
        $(".counter").html('<span class="active">' + (carousel.relative(carousel.current()) + 1) + "</span><span>/</span><span>" + carousel.items().length + "</span>");
    }).owlCarousel(clienAboutUsCarusel);
})(window);
(function(rippleBtn) {
    "use strict";
    var btnRipple = function(e) {
        return false;
    };
    document.addEventListener("click", btnRipple, false);
})(window);
//# sourceMappingURL=data:application/json;base64,
